Mind Map generated by NB MindMap plugin   
> __version__=`1.0`,showJumps=`true`
---

# ZXPoly
- LINK
<pre>https://github.com/raydac/zxpoly</pre>

## Community
> leftSide=`true`,collapsed=`true`


### ZX\.PK\.RU
- LINK
<pre>http://zx-pk.ru/showthread.php?p=794805</pre>

### WoS
> leftSide=`true`

- LINK
<pre>http://worldofspectrum.org/forums/discussion/33021/zx-poly-wow</pre>

## Architecture

### Motherboard
- FILE
<pre>src/main/java/com/igormaznitsa/zxpoly/components/Motherboard.java</pre>

#### Ports

##### \#7FFD<br/>\(write only\)
> fillColor=`#9999FF`


###### bit 0,1,2<br/>\(RAM page\)
> fillColor=`#9999FF`

- NOTE
<pre>Contains the RAM page index to be addressed in the #C000-#FFFF addresses.</pre>

###### bit 3<br/>\(Video page\)
> fillColor=`#9999FF`

- NOTE
<pre>0 - RAM Page 5 as video source
1 - RAM Page 7 as video source</pre>

###### bit 4<br/>\(ROM page\)
> fillColor=`#9999FF`

- NOTE
<pre>0 - Basic 128 ROM page in #0000-#3FFF
1 - Basic 48 ROM page in #0000-#3FFF</pre>

###### bit 5<br/>\(Lock port\)
> fillColor=`#9999FF`

- NOTE
<pre>if the bit is set then any write operation to the port is disabled until full reset</pre>

###### bit 6<br/>\(RAM as ROM\)
> fillColor=`#FF9999`

- NOTE
<pre>Replace ROM at #0000-#3FFF by RAM Page 0
it is writable only if the port #3D00 is not locked by its bit 7</pre>
- TOPIC
<pre>1509E62DCD4A</pre>

###### bit 7<br/>\(Disable CPU0 INT\)
> fillColor=`#FF9999`

- NOTE
<pre>The Bit just disables INT signal for CPU0

value of the bit is working only if both #3D00 and #7FFD ports are not locked

condition:
 CPU0.INT.ENABLE = not #3D00.7 and not #3D00.5 and not #7FFD.5</pre>

##### \#3D00
> fillColor=`#FF9999`


###### Write

####### bit 0<br/>\(Wait for CPU1\-3\)
- NOTE
<pre>If the bit is reset then CPU1,2,3 will be in Wait mode
The Bit sends /WAIT signal for CPU1,2,3</pre>

####### bit 1<br/>\(local RESET\)
> topicLinkUID=`1509EB08F30A`

- NOTE
<pre>if set the bit then local RESET signal will be sent to all CPU (0-3)
the first three bytes will be read not from memory but from local registers R1-R3 of each CPU module</pre>
- TOPIC
<pre>1509F6A63E0A</pre>

####### bit 2,3,4<br/>\(Video mode\)
- FILE
<pre>src/main/java/com/igormaznitsa/zxpoly/components/VideoController.java</pre>

######## 0 \(ZXSrc0\)
> fillColor=`#99FF99`

- NOTE
<pre>Usual ZX-Spectrum video mode 256x192 with attributes
CPU0 memory is used as the video source</pre>

######## 1 \(ZXSrc1\)
> fillColor=`#99FF99`

- NOTE
<pre>Usual ZX-Spectrum video mode 256x192 with attributes
CPU1 memory is used as the video source</pre>

######## 2 \(ZXSrc2\)
> fillColor=`#99FF99`

- NOTE
<pre>Usual ZX-Spectrum video mode 256x192 with attributes
CPU2 memory is used as the video source</pre>

######## 3 \(ZXSrc3\)
> fillColor=`#99FF99`

- NOTE
<pre>Usual ZX-Spectrum video mode 256x192 with attributes
CPU3 memory is used as the video source</pre>

######## 4 \(ZXPoly 256x192\)
> fillColor=`#FF9999`

- NOTE
<pre>Video mode with the same resolution 256x192 and addressing as in standard ZX-Spectrum
but without attributes, instead of attributes in the video mode we make trick and get color per pixel
through combination of values from CPU0-CPU3 video memory
CPU0 - Red component (0-1)
CPU1 - Green component (0-1)
CPU2 - Blue component (0-1)
CPU3 - Bright component (0-1)
it allows to provide 16 colors per pixes without any attribute clash.</pre>

######### VRAM CPU0 \(Red\)
> fillColor=`#FF3333`


######### VRAM CPU1 \(Green\)
> fillColor=`#66FF66`


######### VRAM CPU2 \(Blue\)
> fillColor=`#6666FF`


######### VRAM CPU3 \(Bright\)
> fillColor=`#CCCCFF`


######## 5 \(ZXPoly 512x284\)
> fillColor=`#FF9999`

- NOTE
<pre>Attribute video mode but with 512x384 resolution.
In the video mode, we use VRAM from all CPUs but also use and their color attribute information but place pixels from different CPUs in chess order in block 16x16 pixels

CPU0 - 0
CPU1 - 1
CPU2 - 2
CPU3 - 3

0101010101010101
2323232323232323

numeration of bits from left to right and from top to bottom

0011223344556677
0011223344556677

</pre>

######## 6, 7<br/>\(Reserved\)

####### bit 5,6<br/>\(CPU0 IO Mapping\)
> topicLinkUID=`1509EC0AF10A`

- NOTE
<pre>The Bits allows to turn on memory area of another CPU as IO area for CPU0
just after reset the value is 0 and it makes the mechanism inactive, it will be working only if there is non-zero value
ports #3D00 and #7FFD are global ports and excluded from mapping</pre>

######## Values

######### 0 \(Disabled\)

######### 1 \(CPU1\)

######### 2 \(CPU2\)

######### 3 \(CPU3\)

######## Work

######### IO Writing

########## Write value
- TOPIC
<pre>1509E8F6194A</pre>

########## Generate /NMI<br/>for mapped CPU
> topicLinkUID=`1509E8F6194A`


######### IO Reading

########## Read value
- TOPIC
<pre>1509E8F6E39A</pre>

########## Generate /INT<br/>for mapped CPU
> topicLinkUID=`1509E8F6E39A`


######### \#7FFD and \#3D00<br/>are excluded from<br/>mapped ports

####### bit 7<br/>\(lock port\)
> topicLinkUID=`1509E62DCD4A`

- NOTE
<pre>The Bit locks value of #3D00 port until system RESET
if the bit is set then common system /INT signal will be provided to CPU</pre>

###### Read

####### bit 0,1<br/>\(module index\)
- NOTE
<pre>Allows to figure out the CPU module index, each CPU will read module index where it is placed
0 - CPU0
1 - CPU1
2 - CPU2
3 - CPU3
</pre>

######## 0 \(CPU0\)

######## 1 \(CPU1\)

######## 2 \(CPU2\)

######## 3 \(CPU3\)

####### bit 2<br/>\(IO WR disabled\)
- NOTE
<pre>The Flag shows that CPU will not write IO data in ports, any its IO WR operation will not change port</pre>

####### bit 3<br/>\(RAM WR disabled\)
- NOTE
<pre>The Flag shows that CPU will not change memory value during writing operation</pre>

####### bit 4<br/>\(CPU is mapped\)
- NOTE
<pre>The Flag shows that the CPU memory is mapped by CPU0 as its IO area</pre>

####### bit 5,6,7<br/>\(Memory offset in heap\)
- NOTE
<pre>Contains value of start memory offset in global heap
just after RESET it is:
OFFSET = CPU_INDEX &lt;&lt; 16</pre>

### ZX\-Poly module
- FILE
<pre>src/main/java/com/igormaznitsa/zxpoly/components/ZXPolyModule.java</pre>

#### Local ports
- NOTE
<pre>Each ZX-Poly module has own ports which can be written only by CPU placed on the module or CPU with higher priority (CPU0-&gt;CPU1-&gt;CPU2-&gt;CPU3) 
The Formula to calculate of register port address is:
(module_index &lt;&lt; 12) | (register_index &lt;&lt; 8) | #FF</pre>

##### R0 \(\#X0FF\)

###### Write

####### bit 0,1,2<br/>\(Memory offset\)
- NOTE
<pre>Allows to define offset of the CPU module memory in the heap.
Offset in 64Kb blocks.</pre>

####### bit 3<br/>\(Disable Memory write\)
- NOTE
<pre>If set the bit then memory write operations of the module CPU will not have any effect</pre>

####### bit 4<br/>\(Disable IO write\)
- NOTE
<pre>If set the bit then IO write operations of the module CPU will not have any effect</pre>

####### bit 5<br/>\(Local /RESET\)
> topicLinkUID=`1509EB11309A`

- NOTE
<pre>If set the bit then local RESET will be activated for the CPU module</pre>
- TOPIC
<pre>1509EB08F30A</pre>

####### bit 6<br/>\(Local /NMI\)
- NOTE
<pre>If set the bit then /NMI signal will be sent to the CPU</pre>

####### bit 7<br/>\(Local /INT\)
- NOTE
<pre>If set the bit then /INT signal will be sent to the CPU</pre>

###### Read

####### bit 0<br/>\(HALT is active\)
- NOTE
<pre>The Bit shows that HALT mode is active for the CPU, if it is set then the CPU in HALT mode</pre>

####### bit 1<br/>\(/WAIT is active\)
- NOTE
<pre>Shows state of the /WAIT signal for the CPU, if it is set then /WAIT signal is active</pre>

####### bit 2,3,4,5,6,7<br/>\(packed M1 address\)
- NOTE
<pre>The Bits contain some address bit values which were detected during the last M1 cycle on the bus

bit 2 - signal A01
bit 3 - signal A02
bit 4 - signal A08
bit 5 - signal A12
bit 6 - signal A14
bit 7 - signal A15</pre>

##### R1 \(\#X1FF\)

###### Write

####### bit 0,1,2,3<br/>\(HALT notification\)
> topicLinkUID=`1509EC02C63A`

- NOTE
<pre>Bits show which CPU should be notified if the module CPU meets HALT command
in the case CPU which bit is set will get notification through /INT or /NMI signal (or even both!)</pre>

######## bit 0 \- CPU0

######## bit 1 \- CPU1

######## bit 2 \- CPU2

######## bit 3 \- CPU3

####### bit 4<br/>\(Disable /NMI\) 
- NOTE
<pre>Disable /NMI processing for the module CPU, if the bit is set then the CPU pin /NMI just cut off from the bus</pre>

####### bit 5<br/>\(Disable \#7FFD visibility\)
- TOPIC
<pre>1509EC0AF10A</pre>

####### bit 6<br/>\(Send /INT if HALT\)
- NOTE
<pre>Send /INT to marked CPUs if the module CPU meets HALT</pre>
- TOPIC
<pre>1509EC02C63A</pre>

####### bit 7<br/>\(Send /NMI if HALT\)
- NOTE
<pre>Send /NMI to marked CPUs if the module CPU meets HALT</pre>
- TOPIC
<pre>1509EC02C63A</pre>

###### Read

####### bit 0\-7<br/>\(First command byte\)
- NOTE
<pre>After local RESET, the register will be the source to read the first command byte.</pre>
- TOPIC
<pre>1509EB11309A</pre>

##### R2 \(\#X2FF\)

###### Write

####### bit 0\-7<br/>\(Low byte of STOP ADDR\)
- NOTE
<pre>The Register contains the low byte of the STOP-ADDRESS</pre>
- TOPIC
<pre>1509F6AC5DCA</pre>

###### Read

####### bit 0\-7<br/>\(Second command byte\)
- NOTE
<pre>After local RESET, the register will be the source to read the second command byte.</pre>
- TOPIC
<pre>1509EB11309A</pre>

##### R3 \(\#X3FF\)

###### Write

####### bit 0\-7<br/>\(High byte of STOP ADDR\)
- NOTE
<pre>The Register contains the high byte of the STOP-ADDRESS</pre>
- TOPIC
<pre>1509F6AC5DCA</pre>

###### Read

####### bit 0\-7<br/>\(Third command byte\)
- NOTE
<pre>After local RESET, the register will be the source to read the third command byte.</pre>
- TOPIC
<pre>1509EB11309A</pre>

### Concepts
> fillColor=`#FFFF99`


#### Priorities
> fillColor=`#99FF99`


##### CPU0 \(highest\)
> fillColor=`#66CCFF`


##### CPU1
> fillColor=`#9999FF`


##### CPU2
> fillColor=`#9999FF`


##### CPU3 \(lowest\)
> fillColor=`#CC66FF`


#### Stop\-address
> topicLinkUID=`1509F6AC5DCA`

- NOTE
<pre>Stop-Address means special address where CPU will be stopped
The Stop-Address should not be zero and it will be checked every M1 cycle and if the Stop-Address is the same as the address on the bus then the Wait mode for the CPU will be activated.
</pre>

#### Local RESET
> topicLinkUID=`1509F6A63E0A`

- NOTE
<pre>It is special mode when RESET signal has been sent only to CPU and the first three command bytes will be read from R1-R3 registers.</pre>
